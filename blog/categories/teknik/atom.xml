<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Teknik | Aydın Doyak]]></title>
  <link href="http://aydintd.me/blog/categories/teknik/atom.xml" rel="self"/>
  <link href="http://aydintd.me/"/>
  <updated>2014-06-10T13:56:54+03:00</updated>
  <id>http://aydintd.me/</id>
  <author>
    <name><![CDATA[Aydın Doyak]]></name>
    <email><![CDATA[aydintd@bil.omu.edu.tr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wordpress on Dokku : Dokku Rehberi II]]></title>
    <link href="http://aydintd.me/blog/2014/05/30/wordpress-on-dokku-dokku-rehberi-ii/"/>
    <updated>2014-05-30T01:54:00+03:00</updated>
    <id>http://aydintd.me/blog/2014/05/30/wordpress-on-dokku-dokku-rehberi-ii</id>
    <content type="html"><![CDATA[<p>Bu blog yazısı Dokku Rehberi'nin ikinci kısmı olup, bu yazıda Wordpress'in Dokku PaaS sistemlerine konuşlandırılmasını anlatacağım.</p>

<p>Yazarken Manowar &ndash; Warriors of the World dinledim, bazı kısımlar sert gelebilir. Like thunder from the sky&hellip;</p>

<p>Wordpress herkesin bildiği gibi PHP ile geliştirilmiş, bir çok veritabanı ile entegre çalışabilen bir CMS (Content Management System)
Bir önceki yazımda Dokku'nun nasıl kurulup, nasıl kullanılacağıyla ilgili anlatımı yapmıştım. (Şu anda kayıp, farkındayım) Bu yazıdaysa Wordpress'in taşı toprağıyla ilgileneceğim.</p>

<h3>Beklentiler ve Önbilgiler</h3>

<p>Başlamadan önce;</p>

<ul>
<li><p>Bir sanal makineye Dokku sistemi kurup, Network ve DNS ayarlarını lokaliniz için yapmanız bekleniyor.</p></li>
<li><p>Sonrasında Wordpress'in Dokku için modifiye ettiğim deposunu kullanarak sistemi oluşturup, veritabanı olarak Mysql kullanacağız.</p></li>
</ul>


<h2>Dokku Eklentileri</h2>

<p>PaaS sistemlerde veritabanları eklentiler olarak web uygulamasına bağlanır. Aynı Heroku'nun Postgresql eklentisini uygulumanıza sonradan eklemeniz gibi. Bu durumu Dokku için özelleştirecek olursak, izole konteynırlarda tutulan uygulamanıza, başka bir izole konteynır içerisine kurulan veritabanınız bağlanır ve Dokku tarafından haberleştirilmesi sağlanır. Böylece uygulama ve veritabanını birbirinden ayırmış iki izole linux konteynırında tutulmuş olur.</p>

<p>Bu yazıda Wordpress üzerinden gidecek olsam da, diğer web uygulamaları için izlenecek yol Dokku özelinde benzer. Bu yüzden kurmuş olduğunuz Dokku sisteme kuracağınız eklentilerle daha fazla güç kazandırmak hedefindeyiz. PhpMyAdmin'cilere selam olsun!</p>

<h3>Mysql Eklentisi</h3>

<p>Dokku'ya Mysql kurmak için şu abimizin(k2nr) deposundaki eklentiyi aşağıdaki şekilde sunucuya kuruyoruz :</p>

<pre><code>$ cd /var/lib/dokku/plugins
$ git clone https://github.com/k2nr/dokku-mysql-plugin mysql
$ chmod +x mysql/install mysql/commands
$ dokku plugins-install
</code></pre>

<p>Kurulum bittikten sonra <code>$ dokku help</code> komutuyla Dokku'ya Mysql ile ilgili özel güçler verdiğinizi görebilirsiniz :</p>

<pre><code>...
mysql:create &lt;app&gt;     Create a MySql container
mysql:delete &lt;app&gt;     Delete specified MySql container
mysql:info &lt;app&gt;       Display database informations
mysql:link &lt;app&gt; &lt;db&gt;  Link an app to a MySql database
mysql:logs &lt;app&gt;       Display last logs from MySql container
...
</code></pre>

<p>Mysql eklentisi kurulduktan sonra bu eklenti bize WordPress için gereken veritabanı konteynırını oluşturmamıza yarayacak.</p>

<h3>Dokku User-Env Compile Eklentisi</h3>

<p>Bu eklenti ise Mysql konteynırıyla WordPress arasındaki bağlantıyı kurmak için gereken ortam değişkenlerini konteynırlar arası kullanabilmek için gerekiyor.</p>

<p>Kurulumu şu şekilde :</p>

<pre><code>$ cd /var/lib/dokku/plugins
$ git clone https://github.com/musicglue/dokku-user-env-compile.git user-env-compile
$ dokku plugins-install
</code></pre>

<p>Mysql konteynırı oluşturduğumuzda, eklenti bize WordPress'te tanımlamamız gereken veritabanı kullanıcısı, veritabanının adı, parolası gibi bilgileri ortam değişkenleri vasıtasıyla verecek. Biz de bu eklenti sayesinde bilgileri WordPress'e geçirip, ekstra işlem yapmadan WordPress'i kuracağız.</p>

<h2>WordPress'i Dokku'ya Konuşlandırma</h2>

<p>Daha önceden modifiye ettiğim Wordpress deposunu yerelinize çekin :</p>

<pre><code>$ git clone git@github.com:aydintd/WordPress.git wp  # Uygulamanın ismi wp olacak buraya dikkat.
</code></pre>

<p>Modifiye'nin sebebi <code>wp-config.php</code> dosyasında yaptığım ortam değişkenlerini ortamdan almak için yaptığım düzenleme. (Bkz. PHP'de getenv() fonksiyonu)</p>

<p>Şimdi uzak yolu WordPress için Dokku'ya tanımlayıp, uygulamayı push etmek :</p>

<pre><code>$ cd wp
$ git remote add dokku dokku@dokku.me:wp  # dokku.me sanalda önceden kurduğum Dokku makinesinin adresi, kafanız karışmasın.
$ git push dokku master
</code></pre>

<p>Dokku, Heroku Buildpackleri sayesinde WordPress'in bir PHP uygulaması olduğunu anlayıp, Dokku'ya konuşlandıracak. Ben bu örnek için uygulama ismine <code>wp</code> adını vermiştim. Konuşlandırma işlemi bittiğinde ve şafakta <code>http://wp.dokku.me</code> adresine bakın, <code>Database connection error</code> görüyorsanız anlayın ki Gandalf'ın gelmesi yakın.</p>

<p>Şimdiyse veritabanını wp uygulaması için oluşturalım :</p>

<pre><code>$ ssh dokku@dokku.me dokku mysql:create wp

-----&gt; MySql container created: mysql/wp
    01d4a5471d35

        Host: 172.17.0.3                  
    User: 'admin'                   
    Password: 'hFtI5DtKEa1n4KxM'
    Database: 'db'
    Internal port: 3306
</code></pre>

<p>Gördüğünüz üzere Mysql konteynırı da oluştu ve bize gerekli bilgiler verildi. Ancak bu bilgileri elle girmek yerine Dokku bunu kurduğumuz user-env eklentisiyle kendisi halledebiliyor. Wordpress'i de bu yüzden modifiye ettim. Bi' şey yapmıyorsunuz yani.</p>

<p>Şimdiyse tarayıcınıza <code>http://wp.dokku.me</code> yazdığınızda sizi klasik Wordpress kurulum ekranı karşılayacak. PhpMyAdmin'cilere yine selam olsun!</p>

<h2>Dokku Debugging Style</h2>

<p>Dokku çok güçlü bir PaaS altyapısı bize sunuyor. Bu örnek özelinde yukarıdaki anlatımları uyguladığınızda başarıya ulaşamamışsanız benim karşılaştığım ve çözdüğüm bir kaç yöntemden size bahsedeyim.</p>

<ul>
<li><p>Uygulamalarınız konuşlanamamış olabilir. Dokku sunucuda :</p>

<pre><code> $ sudo docker ps 

 CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                     NAMES
 01d4a5471d35        mysql/wp:latest     /usr/sbin/mysqld       7 minutes ago       Up 7 minutes        0.0.0.0:49197-&gt;3306/tcp   berserk_brattain       
 7ac0cb59bf18        dokku/wp:latest     /bin/bash -c '/start   About an hour ago   Up About an hour    0.0.0.0:49196-&gt;5000/tcp   romantic_pasteur     
</code></pre></li>
</ul>


<p>Bu şekilde bir çıktı gözlemlemeniz beklenmekte. Bu çıktıyı göremiyorsanız yukarıdaki adımları takip edin.</p>

<ul>
<li>Uygulamanızla veritabanı sunucunuz haberleşemiyor olabilir. Bu durumda tarayıcıda <code>Database Connection Error</code> gözlemlemeniz beklenmekte.</li>
</ul>


<p>Bu durumun çeşitli sebepleri olabileceği gibi en çok karşılaştığım durum Mysql tarafından oluşturulan ortam değişkenlerinin WordPress'e düzgün geçirilememesi. Şu adımları izlerseniz fikir sahibi olabilirsiniz :</p>

<p>Dokku sunucuda :</p>

<pre><code>$ sudo dokku config wp  # wp uygulamasına geçirilen ortam değişkenlerini listeler, örnek çıktı :

=== wp config vars ===
DB_HOST: 172.17.0.3
DB_NAME: db
DB_PASS: Wdui95G7Jgv7tBkY
DB_PORT: 3306
DB_USER: admin
</code></pre>

<p>Bu değişkenlerle Wordpress'inizin <code>wp-config.php</code> dosyasındaki değişkenlerin birebir aynı olduğunu kontrol edin :</p>

<pre><code>$ sudo dokku run wp 'cat wp-config.php'   # evet konuşlandırılan konteynırın içerisinde de komut çalıştırabiliyorsunuz!

// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define('DB_NAME', getenv('DB_NAME'));

/** MySQL database username */
define('DB_USER', getenv('DB_USER'));

/** MySQL database password */
define('DB_PASSWORD', getenv('DB_PASS'));

/** MySQL hostname */
define('DB_HOST', getenv('DB_HOST').':'.getenv('DB_PORT'));

/** Database Charset to use in creating database tables. */
define('DB_CHARSET', 'utf8');
...
</code></pre>

<p>Gerisi sizin hayal gücünüze kalıyor. Hepsi bu kadar. :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logical Volume Manager (LVM) Rehberi]]></title>
    <link href="http://aydintd.me/blog/2013/08/25/logical-volume-manager-lvm-rehberi/"/>
    <updated>2013-08-25T16:38:00+03:00</updated>
    <id>http://aydintd.me/blog/2013/08/25/logical-volume-manager-lvm-rehberi</id>
    <content type="html"><![CDATA[<p>LVM yani Logical Volume Manager var olan fiziksel diskleri, insanlık tarihinden bu yana gelen &ldquo;böl, parçala, yönet&rdquo;
mantığıyla sanallaştırıp yönetmek amaçlı yazılmış çok yararlı bir program. Bir ya da birden fazla olan disklerinizi
tek bir disk havuzuymuş gibi gösterip, partitions ile karmaşık disk alanı hesaplamalarını sizin yerinize soyutlayıp
yapıyor.</p>

<p>Bir çok linux dağıtımı artık öntanımlı LVM disk formatı seçeneğiyle gelmekte. Özellikle son sürüm işletim sistemleri
aksini belirtmediğiniz takdirde bu şekilde sisteminize kuruluyor.</p>

<p>Bu blog yazısında lvm ile volume grup oluşturma, birden fazla olan disklerinizi volume gruplar
içerisinde toplayıp daha sonrasında toplam disk alanınız üzerinden nasıl disk bölümlemesi yapıldığını anlatacağım.</p>

<h2>Hazırlık</h2>

<p>Ben bir Ubuntu 12.10 sanal makinesi üzerinde 16GB ve 14GB lık iki diski lvm ile sanallaştırıp toplamda 30GB lık tek bir
sanal disk yaratıp, daha sonra keyfimize göre bu diski sanal olarak bölümleyeceğim.</p>

<p>Aşağıdaki komut ile disklerinizi görüntüleyin.</p>

<p><code>$ sudo fdisk -l</code></p>

<p>Aşağıdaki gibi bölümler göreceksiniz :</p>

<pre><code>`Disk /dev/sdb: 17.2 GB, 17179869184 bytes
255 heads, 63 sectors/track, 2088 cylinders, total 33554432 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

Disk /dev/sdb doesn't contain a valid partition table

Disk /dev/sdc: 15.0 GB, 15032385536 bytes
255 heads, 63 sectors/track, 1827 cylinders, total 29360128 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

Disk /dev/sdc doesn't contain a valid partition table`
</code></pre>

<p>Bu çıktıdan anladığımız, işletim sistemimiz disklerimizden fiziksel olarak haberdar, ancak
hiç bir disk bölümlemesi yapılmadığından dolayı ağlıyor.</p>

<p>Disk bölümlemelerini aşağıdaki gibi yapın :</p>

<p><code>$ sudo fdisk /dev/sdb</code></p>

<p>Açılan konsolda <code>m</code> harfine basarak aşağıdaki gibi yardımcı komutu görüntüleyebilirsiniz :</p>

<pre><code>Command action
    a   toggle a bootable flag
    b   edit bsd disklabel
    c   toggle the dos compatibility flag
    d   delete a partition
    l   list known partition types
    m   print this menu
    n   add a new partition
    o   create a new empty DOS partition table
    p   print the partition table
    q   quit without saving changes
    s   create a new empty Sun disklabel
    t   change a partition's system id
    u   change display/entry units
    v   verify the partition table
    w   write table to disk and exit
    x   extra functionality (experts only)
</code></pre>

<p><code>n</code> harfiyle <code>/dev/sdb</code> diskinde bir bölüm oluşturma işine başlayın. Size bu bölümün primary mi logical mı olacağını soracak.
Öntanımlı primary olarak seçim geliyor. Primary seçtikten sonra oluşturduğumuz disk bölümü için 1-4 arası bir değer girmenizi
sizden isteyecek. İsteğinize göre seçip disk bölümünün diskin ne kadarını bölüm için ayarlayacağınızı size soracak. Ben bu örnekte
tüm diski tek bir bölüm olarak oluşturacağım. Daha sonra <code>w</code> harfiyle değişiklikleri yapıp fdisk programından çıkış yapacağım.</p>

<p>Yukarıda anlatmaya çalıştığım süreç aşağıdaki gibi gözükecek :</p>

<pre><code>Command (m for help): n
Partition type:
    p   primary (0 primary, 0 extended, 4 free)
    e   extended
    Select (default p): 
    Using default response p
    Partition number (1-4, default 1): 
    Using default value 1
    First sector (2048-33554431, default 2048): 
    Using default value 2048
    last sector, +sectors or +size{K,M,G} (2048-33554431, default 33554431): 
    Using default value 33554431

    Command (m for help): w
    The partition table has been altered!

    Calling ioctl() to re-read partition table.
    Syncing disks.

vagrant@precise32:~$
</code></pre>

<p>Aynı işlemi <code>/dev/sdc</code> için de yapın.</p>

<!--more-->


<h2>LVM Rehberi</h2>

<p>Şu anda sistemimizdeki 16GB ve 14GB lık iki diskimizi oluşturduk. Sıra bu diskleri <code>lvm</code> ile sanallaştırmaya geldi.</p>

<p><code>lvm2</code> programını aşağıdaki şekilde indirin :</p>

<p><code>$ sudo apt-get install lvm2</code></p>

<p>Eklediğimiz diskleri physical volume olarak oluşturmamız gerekecek :</p>

<p><code>$ sudo pvcreate /dev/sdb1 /dev/sdc1</code></p>

<p>Physical volume disklerinizi listeleyin :</p>

<p><code>$ sudo pvs</code></p>

<pre><code>vagrant@precise32:~$ sudo pvs
    PV         VG        Fmt  Attr PSize  PFree 
    /dev/sda5  precise32 lvm2 a-   79.76g     0 
    /dev/sdb1            lvm2 a-   16.00g 16.00g
    /dev/sdc1            lvm2 a-   14.00g 14.00g
</code></pre>

<p>Detaylı liste için :</p>

<p><code>$ sudo pvdisplay</code></p>

<p>Physical Volume'lerinizin herhangi bir Volume Grubuna ait olmadığı yukarıda gözüküyor. Sıra geldi bu iki diskimizi
<code>vg1</code> isimli bir volume grup içine alıp, iki ayrı fiziksel diskimizi tek bir diskmiş gibi sanallaştıralım :</p>

<p><code>$ sudo vgcreate vg1 /dev/sdb1 /dev/sdc1</code></p>

<p>Volume Group listelemek için :</p>

<p><code>$ sudo vgdisplay</code></p>

<p>Çıktısını aşağıdaki gibi :</p>

<pre><code>vagrant@precise32:~$ sudo vgdisplay 
--- Volume group ---
VG Name               vg1
  System ID             
    Format                lvm2
    Metadata Areas        2
    Metadata Sequence No  1
    VG Access             read/write
    VG Status             resizable
    MAX LV                0
    Cur LV                0
    Open LV               0
    Max PV                0
    Cur PV                2
    Act PV                2
    VG Size               29.99 GiB
    PE Size               4.00 MiB
    Total PE              7678
    Alloc PE / Size       0 / 0   
    Free  PE / Size       7678 / 29.99 GiB
    VG UUID               K9QzS7-D8aI-O24O-Rcsb-2aMd-pY2D-3zjP5w
</code></pre>

<p>Yukarıda görebileceğiniz gibi 2 metadata alanı (2 disk) ve toplamda 29.99 GiB tek bir sanal disk oluşturduk.</p>

<p>Şimdi sıra oluşturduğumuz vg1 isimli Volume Group'u istediğimiz büyüklükte istediğimiz kadar sanal diske bölüp
sistemimizde kullanılabilir hale getirmeye geldi.</p>

<p>Ben örnek olarak 30 GiB lık toplam boş alanı olan diskimi <code>lv01</code> ve <code>lv02</code> 15 ve 14er GiB lık sanal disklere böleceğim.</p>

<p><code>NOT:</code> Tembel olduğumdan dolayı tam 30 GiB alan hesaplamaya üşendim açıkcası. :)</p>

<p><code>$ sudo lvcreate -L +15G -n lv01 vg1</code></p>

<p><code>sudo lvcreate -L +14G -n lv02 vg1</code></p>

<p>Şimdi oluşturduğumuz Logical Volume'larımızı listeleyelim :</p>

<p><code>$ sudo lvdisplay</code></p>

<pre><code>vagrant@precise32:~$ sudo lvdisplay 
--- Logical volume ---
LV Name                /dev/vg1/lv01
VG Name                vg1
LV UUID                W9TxNd-ORun-k0Cx-2psu-iI1p-8fQc-SroVSm
LV Write Access        read/write
LV Status              available
# open                 0
LV Size                15.00 GiB
Current LE             3840
Segments               1
Allocation             inherit
Read ahead sectors     auto
- currently set to     256
Block device           252:2

--- Logical volume ---
LV Name                /dev/vg1/lv02
VG Name                vg1
LV UUID                zP1NJX-QwlD-JzBm-PYLU-5nFZ-i9vq-q7n3Vv
LV Write Access        read/write
LV Status              available
# open                 0
LV Size                14.00 GiB
Current LE             3584
Segments               2
Allocation             inherit
Read ahead sectors     auto
- currently set to     256
Block device           252:3
</code></pre>

<p>Logical Volume'larımızı da oluşturduk. Sıra geldi bunu sistemimizde kullanılabilir hale getirmeye :</p>

<p>Ubuntu ortamında geliştirme yaptığım için <code>mkfs</code> programı kullanarak oluşturduğum sanal diskleri <code>ext4</code> ile formatlayacağım :</p>

<p><code>$ sudo mkfs.ext4 /dev/mapper/vg1-lv02</code></p>

<p>Çıktısı aşağıdaki gibi olacak :</p>

<pre><code>vagrant@precise32:~$ sudo mkfs.ext4 /dev/vg1/lv01
mke2fs 1.42 (29-Nov-2011)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
983040 inodes, 3932160 blocks
196608 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=4026531840
120 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks: 
32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208

Allocating group tables: done
Writing inode tables: done
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done 
</code></pre>

<p>Aynı işlemi oluşturduğumuz diğer Logical Volume için de yapıp diski formatlayın.</p>

<p>Artık <code>ext4</code> olarak formatladığımız 15 GB'lık diskimizi sistemde kullanabiliriz.</p>

<p>Ben <code>/mnt</code> dizini altında disk1 isimli bir dizin oluşturup, bu dizin altına <code>lv01</code> diskimi <code>mount</code> edeceğim.</p>

<p><code>$ sudo mkdir /mnt/disk1</code></p>

<p><code>$ sudo mount /dev/vg1/lv01 /mnt/disk1</code></p>

<p>Ve diskiniz hazır, diğer hazırladığınız diski de dilerseniz aynı yöntemle formatlayıp sisteme mount edebilirsiniz.</p>

<p>Diski görebilmek için :</p>

<p><code>$ df -h</code></p>

<pre><code>vagrant@precise32:/mnt/disk2$ df -h
Filesystem                  Size  Used Avail Use% Mounted on
/dev/mapper/precise32-root   79G  2.1G   73G   3% /
udev                        178M  4.0K  178M   1% /dev
tmpfs                        74M  296K   74M   1% /run
none                        5.0M     0  5.0M   0% /run/lock
none                        185M     0  185M   0% /run/shm
/dev/sda1                   228M   24M  192M  12% /boot
/vagrant                    290G   65G  225G  23% /vagrant
/dev/mapper/vg1-lv01         15G  354M   14G   3% /mnt/lv01
/dev/mapper/vg1-lv02         14G  340M   13G   3% /mnt/disk2
</code></pre>

<p>Hepsi bu kadar :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RedHat Scientific Linux CentOS Sanal Makine Klonlarının Eth0 ağ Arayüzü Hatasının Düzeltilmesi]]></title>
    <link href="http://aydintd.me/blog/2013/06/25/redhat-scientific-linux-centos-sanal-makine-klonlanirken-eth0-ag-arayuzu-hatasinin-duzeltilmesi/"/>
    <updated>2013-06-25T02:25:00+03:00</updated>
    <id>http://aydintd.me/blog/2013/06/25/redhat-scientific-linux-centos-sanal-makine-klonlanirken-eth0-ag-arayuzu-hatasinin-duzeltilmesi</id>
    <content type="html"><![CDATA[<p>Scientific Linux 6 sürümünü VirtualBox'da &ldquo;bare&rdquo; olarak klonlayıp, ağ konfigürasyonunu
yaparken ilginç bir hatayla karşılaştım. İnternette bir çok yerde SL, CentOS ve
türev sürümlerinin VirtualBox klonlarının internet erişimini sağlayamadığından yakınan
baya bir kullanıcı girdisi okudum.<br/>
Bir kaç okuma yaptıktan sonra, şöyle bir şey keşfettim :</p>

<p>VirtualBox, VMWare gibi sanallaştırma araçları, ilgili klonların her birine
kendisi bir MAC adresi atıyor. Ancak SL, CentOS gibi sürümlerin kernel'leri kendilerine atanan
bu yeni konfigürasyonu ilk başta update edemiyorlar. Eski kernel'da kayıtlı MAC adresiyle
VBox'un klonlara atadığı MAC adresi de örtüşmediğinden sanal makineniz sadece loopback
arayüzünü başlatabiliyor ve eth0 ölü halde kalıyor. Dolayısıyla klonlar internete
çıkamıyorlar.</p>

<h2>Peki Çözüm Nasıl Olmalı?</h2>

<ul>
<li>Kernel'ın başta oluşturduğu &ldquo;ağ arayüzü kuralları&rdquo; dosyasını silelim. Böylece
klon yeniden başlatıldığında kernel kendine yeni bir kural dosyası üretebilsin
ve böylece VM tarafından atanan yeni MAC adresini kendine kaydedebilsin :</li>
</ul>


<p><code>$ sudo rm -rf /etc/udev/rules.d/70-persistent-net.rules</code></p>

<p><code>$ sudo reboot</code></p>

<ul>
<li>Makine yeniden başladıktan sonra sıra geldi ağ yapılandırmasına.
SL 6.4 de default olarak gelen text editörü <code>vi</code> olduğundan dosya
düzenlemelerini vi ile göstereceğim :</li>
</ul>


<p><code>$ sudo vi /etc/sysconfig/network-scripts/ifcfg-eth0</code></p>

<ul>
<li>Dosyada aşağıdaki değişiklikleri uygulayalım :</li>
</ul>


<p><code>MACADDR</code> girdisini kaldıralım.</p>

<p><code>UUID</code> girdisini kaldıralım.</p>

<p>ve dosyayı kaydedip çıkalım.</p>

<ul>
<li>Ağ konfigürasyonumuzu tamamladık, servisi yeniden başlatmalıyız ki girdiğimiz
ayarlar klon tarafından görülebilsin.</li>
</ul>


<p><code>$ service network restart</code></p>

<ul>
<li>ve İnternete çıkış yaptık mı? Ping'leyerek kontrol edelim :</li>
</ul>


<p><code>$ ping 8.8.8.8</code></p>

<p>Ta-daa! Klonunuz internete çıkmaya hazır. Tek yapmanız gereken ihtiyacınız olan servisi
&ldquo;yum"lamak.</p>

<p><code>Önemli Not:</code> VirtualBox'da Ağ Seçeneği NAT olarak ayarlı olmalı.</p>

<h2>Kaynakça</h2>

<p><code>http://blog.roozbehk.com/post/35156862882/redhat-add-network-eth</code></p>

<p><code>http://www.envision-systems.com.au/blog/2012/09/21/fix-eth0-network-interface-when-cloning-redhat-centos-or-scientific-virtual-machines-using-oracle-virtualbox-or-vmware/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntuda Java EE Uygulamaları Için Apache Tomcat7 Uygulama Sunucusunun Kurulumu]]></title>
    <link href="http://aydintd.me/blog/2013/02/26/ubuntuda-java-ee-uygulamalar%C4%B1-i%C3%A7in-apache-tomcat7-uygulama-sunucusunun-kurulumu/"/>
    <updated>2013-02-26T23:34:00+02:00</updated>
    <id>http://aydintd.me/blog/2013/02/26/ubuntuda-java-ee-uygulamaları-için-apache-tomcat7-uygulama-sunucusunun-kurulumu</id>
    <content type="html"><![CDATA[<p>  Java2EE web uygulamaları için gereken açık kaynak apache-tomcat7 uygulama<br/>
  sunucusunun kurulumunu adım adım takip edelim :</p>

<h3>Başlarken</h3>

<p>  Kurulum Linux Ubuntu 12.10 32bit işletim sistemi üzerinde Apache Tomcat 7.0.30<br/>
  sürümü olarak sizi yönlendirecektir.</p>

<ul>
<li> Not : Tomcat Uygulama sunucusunu kurmadan, makinenizde Java nın kurulu<br/>
olduğundan emin olun.</li>
</ul>


<h3>Kurulum</h3>

<p>  Aşağıdaki komutları çalıştırın :</p>

<p>  <code>$ sudo apt-get update &amp;&amp; sudo apt-get install tomcat7</code></p>

<p>  Böylece tomcat7 uygulama sunucusunu makinemize kurmuş olacağız.</p>

<!--more-->


<h3>Konfigurasyon</h3>

<p>  tomcat7 sunucusunu konfigurasyona başlamak için durduralım :</p>

<p>  <code>$ sudo service tomcat7 stop</code></p>

<p>  <code>&gt; Stopping Tomcat servlet engine tomcat7 [ OK ]</code></p>

<p>  Favori text editörünüzle tomcat7 in ayar dosyasını açıp içerisindeki commentli halde bulunan (#)<br/>
  JAVA_HOME dosya yolununun commentini kaldırıp aşağıdaki hale getirin.</p>

<p>  <code>$ sudo vim /etc/default/tomcat7</code></p>

<p>  <code>JAVA_HOME=/usr/lib/jvm/jdk1.7.0</code></p>

<ul>
<li> Not : Makinenizde kurulu olan JDK nın dosya yolunu doğru verdiğinizden emin<br/>
olun. Aksi halde uygulama sunucunuz başlayamayacaktır.</li>
</ul>


<p>  Sunucumuzu tekrar başlatalım :</p>

<p>  <code>$ sudo service tomcat7 start</code></p>

<p>  Tomcat için Firewall unuzda ön tanımlı bir port açın :</p>

<p>  <code>$ sudo ufw enable 8080/tcp</code></p>

<p>  Sunucunun JDK üzerinde çalıştığından emin olalım :</p>

<p>  <code>$ /usr/share/tomcat7/bin/version.sh</code></p>

<p>  Aşağıdaki gibi JVM çıktılarını gözlemlemelisiniz.</p>

<pre><code>    Using CATALINA_BASE:   /usr/share/tomcat7     
    Using CATALINA_HOME:   /usr/share/tomcat7     
    Using CATALINA_TMPDIR: /usr/share/tomcat7/temp        
    Using JRE_HOME:        /usr       
    Using CLASSPATH:    
    /usr/share/tomcat7/bin/bootstrap.jar:/usr/share/tomcat7/bin/tomcat-juli.jar      
    Server version: Apache Tomcat/7.0.30        
    Server built:   Jan 10 2013 04:10:25        
    Server number:  7.0.30.0    
    OS Name:        Linux       
    OS Version:     3.5.0-25-generic    
    Architecture:   i386  
    JVM Version:    1.7.0-b147  
    JVM Vendor:     Oracle Corporation  
</code></pre>

<h3>Son</h3>

<p>  Web Browser a <code>http://localhost:8080</code> yazdığınızda <code>It Works!</code> gibi bir yazı  <br/>
  görüyorsanız, tomcat7 uygulama sunucu kurulumunu başarıyla gerçekleştirmişsinizdir.</p>

<ul>
<li>Önemli not : Kurulumdan hemen sonra Eclipse editörü üzerinde bir<br/>
Java EE uygulamasını görüntülemek istiyorsanız, tomcat7 sunucunuzu konsoldan tekrar kapatmanız gerekebilir.<br/>
Uygulamayı görüntülemeye çalıştığınızda tomcat7 in başka bir prosesle meşgul olduğu<br/>
mesajıyla karşı karşıya kalırsanız,tomcat7 sunucusunu elle kapatın ve Eclipse editörü yardımıyla
uygulamanızı tekrar sunucu üzerinde görüntülemeye çalışın.(çalıştırın)</li>
</ul>


<h3>Kaynakça</h3>

<p>  <code>http://hendrelouw73.wordpress.com</code><br/>
  <code>blog.eviac.com</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant 2]]></title>
    <link href="http://aydintd.me/blog/2013/02/22/vagrant-2/"/>
    <updated>2013-02-22T02:02:00+02:00</updated>
    <id>http://aydintd.me/blog/2013/02/22/vagrant-2</id>
    <content type="html"><![CDATA[<p>  Vagrant Temel Kutu Hazırlama konusunda hazırladığım doküman sayfasına
  aşağıdaki linkten ulaşabilirsiniz.</p>

<p>  <a href="http://aydintd.me/fo/vagrant-2/#slide1">Vagrant 2</a></p>
]]></content>
  </entry>
  
</feed>
